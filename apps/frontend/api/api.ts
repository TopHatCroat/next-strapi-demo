/* tslint:disable */
/* eslint-disable */
/**
 * Strapi CMS Demo
 * Strapi CMS Demo API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: martinovic.antonio@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'slug': string;
    /**
     * 
     * @type {ArticleCategory}
     * @memberof Article
     */
    'category'?: ArticleCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture}
     * @memberof Article
     */
    'image'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Article
     */
    'author'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Article
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Article
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategory
 */
export interface ArticleCategory {
    /**
     * 
     * @type {ArticleCategoryData}
     * @memberof ArticleCategory
     */
    'data'?: ArticleCategoryData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryData
 */
export interface ArticleCategoryData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributes}
     * @memberof ArticleCategoryData
     */
    'attributes'?: ArticleCategoryDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributes
 */
export interface ArticleCategoryDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticles}
     * @memberof ArticleCategoryDataAttributes
     */
    'articles'?: ArticleCategoryDataAttributesArticles;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticles
 */
export interface ArticleCategoryDataAttributesArticles {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInner>}
     * @memberof ArticleCategoryDataAttributesArticles
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInner
 */
export interface ArticleCategoryDataAttributesArticlesDataInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInner
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'category'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImage}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'image'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImage;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'author'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorData
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'picture'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'articles'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'related'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'folder'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData
     */
    'id'?: number;
    /**
     * 
     * @type {object}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData
     */
    'attributes'?: object;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImage
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImage {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImage
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageData
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'related'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolder}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'folder'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolder;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolder
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolder {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolder
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderData
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'pathId'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'parent'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'children'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'files'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner>}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInner
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'related'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'folder'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy {
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
     */
    'data'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'registrationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'roles'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'preferedLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'users'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'permissions'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner {
    /**
     * 
     * @type {number}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
     */
    'attributes'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'subject'?: string;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'properties'?: any;
    /**
     * 
     * @type {any}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'conditions'?: any;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'role'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated
 */
export interface ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData>}
     * @memberof ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesCategoryData>;
}
/**
 * 
 * @export
 * @interface ArticleListResponse
 */
export interface ArticleListResponse {
    /**
     * 
     * @type {Array<ArticleListResponseDataItem>}
     * @memberof ArticleListResponse
     */
    'data'?: Array<ArticleListResponseDataItem>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof ArticleListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface ArticleListResponseDataItem
 */
export interface ArticleListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {Article}
     * @memberof ArticleListResponseDataItem
     */
    'attributes'?: Article;
}
/**
 * 
 * @export
 * @interface ArticleListResponseMeta
 */
export interface ArticleListResponseMeta {
    /**
     * 
     * @type {ArticleListResponseMetaPagination}
     * @memberof ArticleListResponseMeta
     */
    'pagination'?: ArticleListResponseMetaPagination;
}
/**
 * 
 * @export
 * @interface ArticleListResponseMetaPagination
 */
export interface ArticleListResponseMetaPagination {
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArticleListResponseMetaPagination
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ArticleRequest
 */
export interface ArticleRequest {
    /**
     * 
     * @type {ArticleRequestData}
     * @memberof ArticleRequest
     */
    'data': ArticleRequestData;
}
/**
 * 
 * @export
 * @interface ArticleRequestData
 */
export interface ArticleRequestData {
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof ArticleRequestData
     */
    'slug': string;
    /**
     * 
     * @type {ArticleRequestDataCategory}
     * @memberof ArticleRequestData
     */
    'category'?: ArticleRequestDataCategory;
    /**
     * 
     * @type {ArticleRequestDataCategory}
     * @memberof ArticleRequestData
     */
    'image'?: ArticleRequestDataCategory;
    /**
     * 
     * @type {ArticleRequestDataCategory}
     * @memberof ArticleRequestData
     */
    'author'?: ArticleRequestDataCategory;
}
/**
 * @type ArticleRequestDataCategory
 * @export
 */
export type ArticleRequestDataCategory = number | string;

/**
 * 
 * @export
 * @interface ArticleResponse
 */
export interface ArticleResponse {
    /**
     * 
     * @type {ArticleResponseDataObject}
     * @memberof ArticleResponse
     */
    'data'?: ArticleResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof ArticleResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ArticleResponseDataObject
 */
export interface ArticleResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof ArticleResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {Article}
     * @memberof ArticleResponseDataObject
     */
    'attributes'?: Article;
}
/**
 * 
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface AuthForgotPasswordPost200Response
 */
export interface AuthForgotPasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPost200Response
     */
    'ok'?: AuthForgotPasswordPost200ResponseOkEnum;
}

export const AuthForgotPasswordPost200ResponseOkEnum = {
    True: 'true'
} as const;

export type AuthForgotPasswordPost200ResponseOkEnum = typeof AuthForgotPasswordPost200ResponseOkEnum[keyof typeof AuthForgotPasswordPost200ResponseOkEnum];

/**
 * 
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'passwordConfirmation'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'sent'?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
    True: 'true'
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum = typeof AuthSendEmailConfirmationPost200ResponseSentEnum[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'slug': string;
    /**
     * 
     * @type {CategoryArticles}
     * @memberof Category
     */
    'articles'?: CategoryArticles;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Category
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Category
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface CategoryArticles
 */
export interface CategoryArticles {
    /**
     * 
     * @type {Array<CategoryArticlesDataInner>}
     * @memberof CategoryArticles
     */
    'data'?: Array<CategoryArticlesDataInner>;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInner
 */
export interface CategoryArticlesDataInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributes}
     * @memberof CategoryArticlesDataInner
     */
    'attributes'?: CategoryArticlesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributes
 */
export interface CategoryArticlesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'category'?: CategoryArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImage}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'image'?: CategoryArticlesDataInnerAttributesImage;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'author'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesCategory
 */
export interface CategoryArticlesDataInnerAttributesCategory {
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesCategoryData}
     * @memberof CategoryArticlesDataInnerAttributesCategory
     */
    'data'?: CategoryArticlesDataInnerAttributesCategoryData;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesCategoryData
 */
export interface CategoryArticlesDataInnerAttributesCategoryData {
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesCategoryData
     */
    'id'?: number;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesCategoryDataAttributes}
     * @memberof CategoryArticlesDataInnerAttributesCategoryData
     */
    'attributes'?: CategoryArticlesDataInnerAttributesCategoryDataAttributes;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesCategoryDataAttributes
 */
export interface CategoryArticlesDataInnerAttributesCategoryDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'articles'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesCategoryDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImage
 */
export interface CategoryArticlesDataInnerAttributesImage {
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageData}
     * @memberof CategoryArticlesDataInnerAttributesImage
     */
    'data'?: CategoryArticlesDataInnerAttributesImageData;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageData
 */
export interface CategoryArticlesDataInnerAttributesImageData {
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageData
     */
    'id'?: number;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageDataAttributes}
     * @memberof CategoryArticlesDataInnerAttributesImageData
     */
    'attributes'?: CategoryArticlesDataInnerAttributesImageDataAttributes;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageDataAttributes
 */
export interface CategoryArticlesDataInnerAttributesImageDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'related'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageDataAttributesFolder}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'folder'?: CategoryArticlesDataInnerAttributesImageDataAttributesFolder;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageDataAttributesFolder
 */
export interface CategoryArticlesDataInnerAttributesImageDataAttributesFolder {
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageDataAttributesFolderData}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolder
     */
    'data'?: CategoryArticlesDataInnerAttributesImageDataAttributesFolderData;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderData
 */
export interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderData {
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderData
     */
    'id'?: number;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderData
     */
    'attributes'?: CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
 */
export interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'pathId'?: number;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'parent'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'children'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'files'?: CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles
 */
export interface CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles {
    /**
     * 
     * @type {Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData>}
     * @memberof CategoryArticlesDataInnerAttributesImageDataAttributesFolderDataAttributesFiles
     */
    'data'?: Array<ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPictureData>;
}
/**
 * 
 * @export
 * @interface CategoryListResponse
 */
export interface CategoryListResponse {
    /**
     * 
     * @type {Array<CategoryListResponseDataItem>}
     * @memberof CategoryListResponse
     */
    'data'?: Array<CategoryListResponseDataItem>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof CategoryListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface CategoryListResponseDataItem
 */
export interface CategoryListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof CategoryListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {Category}
     * @memberof CategoryListResponseDataItem
     */
    'attributes'?: Category;
}
/**
 * 
 * @export
 * @interface CategoryRequest
 */
export interface CategoryRequest {
    /**
     * 
     * @type {CategoryRequestData}
     * @memberof CategoryRequest
     */
    'data': CategoryRequestData;
}
/**
 * 
 * @export
 * @interface CategoryRequestData
 */
export interface CategoryRequestData {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'slug': string;
    /**
     * 
     * @type {Array<ArticleRequestDataCategory>}
     * @memberof CategoryRequestData
     */
    'articles'?: Array<ArticleRequestDataCategory>;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * 
     * @type {CategoryResponseDataObject}
     * @memberof CategoryResponse
     */
    'data'?: CategoryResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof CategoryResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface CategoryResponseDataObject
 */
export interface CategoryResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof CategoryResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {Category}
     * @memberof CategoryResponseDataObject
     */
    'attributes'?: Category;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {number}
     * @memberof ErrorError
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface Global
 */
export interface Global {
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'siteName': string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof Global
     */
    'defaultSeo': SharedSeoComponent;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture}
     * @memberof Global
     */
    'favicon'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Global
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Global
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Global
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface GlobalListResponse
 */
export interface GlobalListResponse {
    /**
     * 
     * @type {Array<GlobalListResponseDataItem>}
     * @memberof GlobalListResponse
     */
    'data'?: Array<GlobalListResponseDataItem>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof GlobalListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface GlobalListResponseDataItem
 */
export interface GlobalListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof GlobalListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {Global}
     * @memberof GlobalListResponseDataItem
     */
    'attributes'?: Global;
}
/**
 * 
 * @export
 * @interface GlobalRequest
 */
export interface GlobalRequest {
    /**
     * 
     * @type {GlobalRequestData}
     * @memberof GlobalRequest
     */
    'data': GlobalRequestData;
}
/**
 * 
 * @export
 * @interface GlobalRequestData
 */
export interface GlobalRequestData {
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'siteName': string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalRequestData
     */
    'defaultSeo': SharedSeoComponent;
    /**
     * 
     * @type {ArticleRequestDataCategory}
     * @memberof GlobalRequestData
     */
    'favicon'?: ArticleRequestDataCategory;
}
/**
 * 
 * @export
 * @interface GlobalResponse
 */
export interface GlobalResponse {
    /**
     * 
     * @type {GlobalResponseDataObject}
     * @memberof GlobalResponse
     */
    'data'?: GlobalResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof GlobalResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObject
 */
export interface GlobalResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof GlobalResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {Global}
     * @memberof GlobalResponseDataObject
     */
    'attributes'?: Global;
}
/**
 * 
 * @export
 * @interface Homepage
 */
export interface Homepage {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof Homepage
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {SectionsHeroComponent}
     * @memberof Homepage
     */
    'hero': SectionsHeroComponent;
    /**
     * 
     * @type {string}
     * @memberof Homepage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Homepage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Homepage
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Homepage
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface HomepageListResponse
 */
export interface HomepageListResponse {
    /**
     * 
     * @type {Array<HomepageListResponseDataItem>}
     * @memberof HomepageListResponse
     */
    'data'?: Array<HomepageListResponseDataItem>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof HomepageListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface HomepageListResponseDataItem
 */
export interface HomepageListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof HomepageListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {Homepage}
     * @memberof HomepageListResponseDataItem
     */
    'attributes'?: Homepage;
}
/**
 * 
 * @export
 * @interface HomepageRequest
 */
export interface HomepageRequest {
    /**
     * 
     * @type {HomepageRequestData}
     * @memberof HomepageRequest
     */
    'data': HomepageRequestData;
}
/**
 * 
 * @export
 * @interface HomepageRequestData
 */
export interface HomepageRequestData {
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomepageRequestData
     */
    'seo'?: SharedSeoComponent;
    /**
     * 
     * @type {SectionsHeroComponent}
     * @memberof HomepageRequestData
     */
    'hero': SectionsHeroComponent;
}
/**
 * 
 * @export
 * @interface HomepageResponse
 */
export interface HomepageResponse {
    /**
     * 
     * @type {HomepageResponseDataObject}
     * @memberof HomepageResponse
     */
    'data'?: HomepageResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof HomepageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface HomepageResponseDataObject
 */
export interface HomepageResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof HomepageResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {Homepage}
     * @memberof HomepageResponseDataObject
     */
    'attributes'?: Homepage;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorData}
     * @memberof ModelError
     */
    'data'?: ErrorData | null;
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    'error': ErrorError;
}
/**
 * 
 * @export
 * @interface SectionsHeroComponent
 */
export interface SectionsHeroComponent {
    /**
     * 
     * @type {number}
     * @memberof SectionsHeroComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionsHeroComponent
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface SharedSeoComponent
 */
export interface SharedSeoComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedSeoComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImage}
     * @memberof SharedSeoComponent
     */
    'shareImage'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImage;
}
/**
 * 
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'formats'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'provider'?: string;
    /**
     * 
     * @type {object}
     * @memberof UploadFile
     */
    'provider_metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersIdDelete200Response
 */
export interface UsersIdDelete200Response {
    /**
     * 
     * @type {number}
     * @memberof UsersIdDelete200Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersIdDelete200Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersIdDelete200Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsPermissionsGet200Response
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
    /**
     * every controller of the api
     * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
     * @memberof UsersPermissionsPermissionsTreeValue
     */
    'controllers'?: { [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'policy'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
    /**
     * 
     * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
     * @memberof UsersPermissionsRolesGet200Response
     */
    'roles'?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf
 */
export interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInnerAllOf
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPermissionsRolesIdGet200Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * 
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRegistration
     */
    'jwt'?: string;
    /**
     * 
     * @type {UsersPermissionsUser}
     * @memberof UsersPermissionsUserRegistration
     */
    'user'?: UsersPermissionsUser;
}
/**
 * 
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
    /**
     * 
     * @type {number}
     * @memberof UsersPost201Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPost201Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Writer
 */
export interface Writer {
    /**
     * 
     * @type {string}
     * @memberof Writer
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImage}
     * @memberof Writer
     */
    'picture'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImage;
    /**
     * 
     * @type {WriterArticles}
     * @memberof Writer
     */
    'articles'?: WriterArticles;
    /**
     * 
     * @type {string}
     * @memberof Writer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Writer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Writer
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Writer
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof Writer
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface WriterArticles
 */
export interface WriterArticles {
    /**
     * 
     * @type {Array<WriterArticlesDataInner>}
     * @memberof WriterArticles
     */
    'data'?: Array<WriterArticlesDataInner>;
}
/**
 * 
 * @export
 * @interface WriterArticlesDataInner
 */
export interface WriterArticlesDataInner {
    /**
     * 
     * @type {number}
     * @memberof WriterArticlesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {WriterArticlesDataInnerAttributes}
     * @memberof WriterArticlesDataInner
     */
    'attributes'?: WriterArticlesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface WriterArticlesDataInnerAttributes
 */
export interface WriterArticlesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {WriterArticlesDataInnerAttributesCategory}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'category'?: WriterArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'image'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthorDataAttributesPicture;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'author'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesAuthor;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof WriterArticlesDataInnerAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface WriterArticlesDataInnerAttributesCategory
 */
export interface WriterArticlesDataInnerAttributesCategory {
    /**
     * 
     * @type {WriterArticlesDataInnerAttributesCategoryData}
     * @memberof WriterArticlesDataInnerAttributesCategory
     */
    'data'?: WriterArticlesDataInnerAttributesCategoryData;
}
/**
 * 
 * @export
 * @interface WriterArticlesDataInnerAttributesCategoryData
 */
export interface WriterArticlesDataInnerAttributesCategoryData {
    /**
     * 
     * @type {number}
     * @memberof WriterArticlesDataInnerAttributesCategoryData
     */
    'id'?: number;
    /**
     * 
     * @type {WriterArticlesDataInnerAttributesCategoryDataAttributes}
     * @memberof WriterArticlesDataInnerAttributesCategoryData
     */
    'attributes'?: WriterArticlesDataInnerAttributesCategoryDataAttributes;
}
/**
 * 
 * @export
 * @interface WriterArticlesDataInnerAttributesCategoryDataAttributes
 */
export interface WriterArticlesDataInnerAttributesCategoryDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'articles'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesImageDataAttributesRelated;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'createdBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
    /**
     * 
     * @type {ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory}
     * @memberof WriterArticlesDataInnerAttributesCategoryDataAttributes
     */
    'updatedBy'?: ArticleCategoryDataAttributesArticlesDataInnerAttributesCategory;
}
/**
 * 
 * @export
 * @interface WriterListResponse
 */
export interface WriterListResponse {
    /**
     * 
     * @type {Array<WriterListResponseDataItem>}
     * @memberof WriterListResponse
     */
    'data'?: Array<WriterListResponseDataItem>;
    /**
     * 
     * @type {ArticleListResponseMeta}
     * @memberof WriterListResponse
     */
    'meta'?: ArticleListResponseMeta;
}
/**
 * 
 * @export
 * @interface WriterListResponseDataItem
 */
export interface WriterListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof WriterListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {Writer}
     * @memberof WriterListResponseDataItem
     */
    'attributes'?: Writer;
}
/**
 * 
 * @export
 * @interface WriterRequest
 */
export interface WriterRequest {
    /**
     * 
     * @type {WriterRequestData}
     * @memberof WriterRequest
     */
    'data': WriterRequestData;
}
/**
 * 
 * @export
 * @interface WriterRequestData
 */
export interface WriterRequestData {
    /**
     * 
     * @type {string}
     * @memberof WriterRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {ArticleRequestDataCategory}
     * @memberof WriterRequestData
     */
    'picture'?: ArticleRequestDataCategory;
    /**
     * 
     * @type {Array<ArticleRequestDataCategory>}
     * @memberof WriterRequestData
     */
    'articles'?: Array<ArticleRequestDataCategory>;
    /**
     * 
     * @type {string}
     * @memberof WriterRequestData
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface WriterResponse
 */
export interface WriterResponse {
    /**
     * 
     * @type {WriterResponseDataObject}
     * @memberof WriterResponse
     */
    'data'?: WriterResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof WriterResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface WriterResponseDataObject
 */
export interface WriterResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof WriterResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {Writer}
     * @memberof WriterResponseDataObject
     */
    'attributes'?: Writer;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticlesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteArticlesId', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArticlesId', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticles: async (articleRequest: ArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleRequest' is not null or undefined
            assertParamExists('postArticles', 'articleRequest', articleRequest)
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putArticlesId: async (id: number, articleRequest: ArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putArticlesId', 'id', id)
            // verify required parameter 'articleRequest' is not null or undefined
            assertParamExists('putArticlesId', 'articleRequest', articleRequest)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticlesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticlesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticles(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticles(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticlesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticlesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postArticles(articleRequest: ArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postArticles(articleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleRequest} articleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putArticlesId(id: number, articleRequest: ArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putArticlesId(id, articleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * 
         * @param {ArticleApiDeleteArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticlesId(requestParameters: ArticleApiDeleteArticlesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteArticlesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiGetArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(requestParameters: ArticleApiGetArticlesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ArticleListResponse> {
            return localVarFp.getArticles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiGetArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesId(requestParameters: ArticleApiGetArticlesIdRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.getArticlesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiPostArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticles(requestParameters: ArticleApiPostArticlesRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.postArticles(requestParameters.articleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleApiPutArticlesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putArticlesId(requestParameters: ArticleApiPutArticlesIdRequest, options?: AxiosRequestConfig): AxiosPromise<ArticleResponse> {
            return localVarFp.putArticlesId(requestParameters.id, requestParameters.articleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiDeleteArticlesIdRequest
 */
export interface ArticleApiDeleteArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiDeleteArticlesId
     */
    readonly id: number
}

/**
 * Request parameters for getArticles operation in ArticleApi.
 * @export
 * @interface ArticleApiGetArticlesRequest
 */
export interface ArticleApiGetArticlesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ArticleApiGetArticles
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ArticleApiGetArticles
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof ArticleApiGetArticles
     */
    readonly locale?: string
}

/**
 * Request parameters for getArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiGetArticlesIdRequest
 */
export interface ArticleApiGetArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiGetArticlesId
     */
    readonly id: number
}

/**
 * Request parameters for postArticles operation in ArticleApi.
 * @export
 * @interface ArticleApiPostArticlesRequest
 */
export interface ArticleApiPostArticlesRequest {
    /**
     * 
     * @type {ArticleRequest}
     * @memberof ArticleApiPostArticles
     */
    readonly articleRequest: ArticleRequest
}

/**
 * Request parameters for putArticlesId operation in ArticleApi.
 * @export
 * @interface ArticleApiPutArticlesIdRequest
 */
export interface ArticleApiPutArticlesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleApiPutArticlesId
     */
    readonly id: number

    /**
     * 
     * @type {ArticleRequest}
     * @memberof ArticleApiPutArticlesId
     */
    readonly articleRequest: ArticleRequest
}

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 
     * @param {ArticleApiDeleteArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public deleteArticlesId(requestParameters: ArticleApiDeleteArticlesIdRequest, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).deleteArticlesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiGetArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public getArticles(requestParameters: ArticleApiGetArticlesRequest = {}, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).getArticles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiGetArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public getArticlesId(requestParameters: ArticleApiGetArticlesIdRequest, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).getArticlesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiPostArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public postArticles(requestParameters: ArticleApiPostArticlesRequest, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).postArticles(requestParameters.articleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleApiPutArticlesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public putArticlesId(requestParameters: ArticleApiPutArticlesIdRequest, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).putArticlesId(requestParameters.id, requestParameters.articleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories: async (categoryRequest: CategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('postCategories', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId: async (id: number, categoryRequest: CategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCategoriesId', 'id', id)
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('putCategoriesId', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoriesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategories(categoryRequest: CategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategories(categoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesId(id: number, categoryRequest: CategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategoriesId(id, categoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryListResponse> {
            return localVarFp.getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.getCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.postCategories(requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiDeleteCategoriesIdRequest
 */
export interface CategoryApiDeleteCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiDeleteCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for getCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesRequest
 */
export interface CategoryApiGetCategoriesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof CategoryApiGetCategories
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly locale?: string
}

/**
 * Request parameters for getCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesIdRequest
 */
export interface CategoryApiGetCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiGetCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for postCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiPostCategoriesRequest
 */
export interface CategoryApiPostCategoriesRequest {
    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPostCategories
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * Request parameters for putCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiPutCategoriesIdRequest
 */
export interface CategoryApiPutCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly id: number

    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).deleteCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).postCategories(requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal: async (globalRequest: GlobalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'globalRequest' is not null or undefined
            assertParamExists('putGlobal', 'globalRequest', globalRequest)
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(globalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGlobal(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGlobal(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlobal(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobal(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGlobal(globalRequest: GlobalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGlobal(globalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GlobalApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteGlobal(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: AxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.putGlobal(requestParameters.globalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiGetGlobalRequest
 */
export interface GlobalApiGetGlobalRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof GlobalApiGetGlobal
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly locale?: string
}

/**
 * Request parameters for putGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiPutGlobalRequest
 */
export interface GlobalApiPutGlobalRequest {
    /**
     * 
     * @type {GlobalRequest}
     * @memberof GlobalApiPutGlobal
     */
    readonly globalRequest: GlobalRequest
}

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public deleteGlobal(options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).deleteGlobal(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).putGlobal(requestParameters.globalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HomepageApi - axios parameter creator
 * @export
 */
export const HomepageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomepage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/homepage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomepage: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/homepage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HomepageRequest} homepageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomepage: async (homepageRequest: HomepageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homepageRequest' is not null or undefined
            assertParamExists('putHomepage', 'homepageRequest', homepageRequest)
            const localVarPath = `/homepage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homepageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomepageApi - functional programming interface
 * @export
 */
export const HomepageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomepageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHomepage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomepage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomepage(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomepageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomepage(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HomepageRequest} homepageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHomepage(homepageRequest: HomepageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomepageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHomepage(homepageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HomepageApi - factory interface
 * @export
 */
export const HomepageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomepageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomepage(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteHomepage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomepageApiGetHomepageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomepage(requestParameters: HomepageApiGetHomepageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<HomepageResponse> {
            return localVarFp.getHomepage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomepageApiPutHomepageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomepage(requestParameters: HomepageApiPutHomepageRequest, options?: AxiosRequestConfig): AxiosPromise<HomepageResponse> {
            return localVarFp.putHomepage(requestParameters.homepageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomepage operation in HomepageApi.
 * @export
 * @interface HomepageApiGetHomepageRequest
 */
export interface HomepageApiGetHomepageRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HomepageApiGetHomepage
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof HomepageApiGetHomepage
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HomepageApiGetHomepage
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HomepageApiGetHomepage
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HomepageApiGetHomepage
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HomepageApiGetHomepage
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HomepageApiGetHomepage
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HomepageApiGetHomepage
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof HomepageApiGetHomepage
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof HomepageApiGetHomepage
     */
    readonly locale?: string
}

/**
 * Request parameters for putHomepage operation in HomepageApi.
 * @export
 * @interface HomepageApiPutHomepageRequest
 */
export interface HomepageApiPutHomepageRequest {
    /**
     * 
     * @type {HomepageRequest}
     * @memberof HomepageApiPutHomepage
     */
    readonly homepageRequest: HomepageRequest
}

/**
 * HomepageApi - object-oriented interface
 * @export
 * @class HomepageApi
 * @extends {BaseAPI}
 */
export class HomepageApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomepageApi
     */
    public deleteHomepage(options?: AxiosRequestConfig) {
        return HomepageApiFp(this.configuration).deleteHomepage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomepageApiGetHomepageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomepageApi
     */
    public getHomepage(requestParameters: HomepageApiGetHomepageRequest = {}, options?: AxiosRequestConfig) {
        return HomepageApiFp(this.configuration).getHomepage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomepageApiPutHomepageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomepageApi
     */
    public putHomepage(requestParameters: HomepageApiPutHomepageRequest, options?: AxiosRequestConfig) {
        return HomepageApiFp(this.configuration).putHomepage(requestParameters.homepageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdDelete', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdGet', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost: async (files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadPost', 'files', files)
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (path !== undefined) { 
                localVarFormParams.append('path', path as any);
            }
    
            if (refId !== undefined) { 
                localVarFormParams.append('refId', refId as any);
            }
    
            if (ref !== undefined) { 
                localVarFormParams.append('ref', ref as any);
            }
    
            if (field !== undefined) { 
                localVarFormParams.append('field', field as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPost(files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(files, path, refId, ref, field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadFileApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet(options?: AxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload files
         * @summary 
         * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for uploadFilesIdDelete operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdDeleteRequest
 */
export interface UploadFileApiUploadFilesIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for uploadFilesIdGet operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdGetRequest
 */
export interface UploadFileApiUploadFilesIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for uploadPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadPostRequest
 */
export interface UploadFileApiUploadPostRequest {
    /**
     * 
     * @type {Array<File>}
     * @memberof UploadFileApiUploadPost
     */
    readonly files: Array<File>

    /**
     * The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly path?: string

    /**
     * The ID of the entry which the file(s) will be linked to
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly refId?: string

    /**
     * The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly ref?: string

    /**
     * The field of the entry which the file(s) will be precisely linked to.
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly field?: string
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesGet(options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload files
     * @summary 
     * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost: async (authChangePasswordPostRequest: AuthChangePasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
            assertParamExists('authChangePasswordPost', 'authChangePasswordPostRequest', authChangePasswordPostRequest)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (confirmation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (confirmation !== undefined) {
                localVarQueryParameter['confirmation'] = confirmation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authForgotPasswordPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (authLocalPostRequest: AuthLocalPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalPostRequest' is not null or undefined
            assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest)
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
            assertParamExists('authLocalRegisterPost', 'authLocalRegisterPostRequest', authLocalRegisterPostRequest)
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authProviderCallbackGet', 'provider', provider)
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (authResetPasswordPostRequest: AuthResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
            assertParamExists('authResetPasswordPost', 'authResetPasswordPostRequest', authResetPasswordPostRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authSendEmailConfirmationPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet: async (provider: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('connectProviderGet', 'provider', provider)
            const localVarPath = `/connect/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordPost(authChangePasswordPostRequest: AuthChangePasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(authChangePasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(confirmation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(confirmation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(authForgotPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(authLocalPostRequest: AuthLocalPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(authLocalPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(authLocalRegisterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(authResetPasswordPostRequest: AuthResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(authResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendEmailConfirmationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(authForgotPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectProviderGet(provider: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectProviderGet(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm user email
         * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send rest password email
         * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authProviderCallbackGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rest user password
         * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: AxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
            return localVarFp.authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: AxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.connectProviderGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
    /**
     * 
     * @type {AuthChangePasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
     */
    readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
    /**
     * confirmation token received by email
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
     */
    readonly confirmation?: string
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
    /**
     * 
     * @type {AuthLocalPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalPost
     */
    readonly authLocalPostRequest: AuthLocalPostRequest
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
    /**
     * 
     * @type {AuthLocalRegisterPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
     */
    readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
     */
    readonly provider: string
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {AuthResetPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
     */
    readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for connectProviderGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiConnectProviderGetRequest
 */
export interface UsersPermissionsAuthApiConnectProviderGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiConnectProviderGet
     */
    readonly provider: string
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authProviderCallbackGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).connectProviderGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, usersPostRequest: UsersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersIdPut', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersPermissionsRolesIdGet', 'id', id)
            const localVarPath = `/users-permissions/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost: async (usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesPost', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete: async (role: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRoleDelete', 'role', role)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut: async (role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'role', role)
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (usersPostRequest: UsersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersPost', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsUsersRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, usersPostRequest: UsersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsPermissionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesPost(usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRoleDelete(role: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRolePut(role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRolePut(role, usersPermissionsRolesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(usersPostRequest: UsersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(usersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsUsersRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.usersCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: AxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<UsersIdDelete200Response> {
            return localVarFp.usersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user
         * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
            return localVarFp.usersPermissionsPermissionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesGet200Response> {
            return localVarFp.usersPermissionsRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
            return localVarFp.usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: AxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersPost(requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersIdDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for usersIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdGetRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersIdPut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdPutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdPutRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * Request parameters for usersPermissionsRolesIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersPermissionsRolesPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesPost
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPermissionsRolesRoleDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDelete
     */
    readonly role: string
}

/**
 * Request parameters for usersPermissionsRolesRolePut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly role: string

    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPostRequest {
    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPost
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI {
    /**
     * 
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersCountGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersMeGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsPermissionsGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsPermissionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPost(requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WriterApi - axios parameter creator
 * @export
 */
export const WriterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWritersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWritersId', 'id', id)
            const localVarPath = `/writers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWriters: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/writers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWritersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWritersId', 'id', id)
            const localVarPath = `/writers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WriterRequest} writerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWriters: async (writerRequest: WriterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'writerRequest' is not null or undefined
            assertParamExists('postWriters', 'writerRequest', writerRequest)
            const localVarPath = `/writers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(writerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {WriterRequest} writerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWritersId: async (id: number, writerRequest: WriterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWritersId', 'id', id)
            // verify required parameter 'writerRequest' is not null or undefined
            assertParamExists('putWritersId', 'writerRequest', writerRequest)
            const localVarPath = `/writers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(writerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WriterApi - functional programming interface
 * @export
 */
export const WriterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WriterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWritersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWritersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWriters(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WriterListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWriters(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWritersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WriterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWritersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WriterRequest} writerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWriters(writerRequest: WriterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WriterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWriters(writerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {WriterRequest} writerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWritersId(id: number, writerRequest: WriterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WriterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWritersId(id, writerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WriterApi - factory interface
 * @export
 */
export const WriterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WriterApiFp(configuration)
    return {
        /**
         * 
         * @param {WriterApiDeleteWritersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWritersId(requestParameters: WriterApiDeleteWritersIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteWritersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WriterApiGetWritersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWriters(requestParameters: WriterApiGetWritersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WriterListResponse> {
            return localVarFp.getWriters(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WriterApiGetWritersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWritersId(requestParameters: WriterApiGetWritersIdRequest, options?: AxiosRequestConfig): AxiosPromise<WriterResponse> {
            return localVarFp.getWritersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WriterApiPostWritersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWriters(requestParameters: WriterApiPostWritersRequest, options?: AxiosRequestConfig): AxiosPromise<WriterResponse> {
            return localVarFp.postWriters(requestParameters.writerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WriterApiPutWritersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWritersId(requestParameters: WriterApiPutWritersIdRequest, options?: AxiosRequestConfig): AxiosPromise<WriterResponse> {
            return localVarFp.putWritersId(requestParameters.id, requestParameters.writerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteWritersId operation in WriterApi.
 * @export
 * @interface WriterApiDeleteWritersIdRequest
 */
export interface WriterApiDeleteWritersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof WriterApiDeleteWritersId
     */
    readonly id: number
}

/**
 * Request parameters for getWriters operation in WriterApi.
 * @export
 * @interface WriterApiGetWritersRequest
 */
export interface WriterApiGetWritersRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof WriterApiGetWriters
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof WriterApiGetWriters
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof WriterApiGetWriters
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof WriterApiGetWriters
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof WriterApiGetWriters
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof WriterApiGetWriters
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof WriterApiGetWriters
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof WriterApiGetWriters
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof WriterApiGetWriters
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof WriterApiGetWriters
     */
    readonly locale?: string
}

/**
 * Request parameters for getWritersId operation in WriterApi.
 * @export
 * @interface WriterApiGetWritersIdRequest
 */
export interface WriterApiGetWritersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof WriterApiGetWritersId
     */
    readonly id: number
}

/**
 * Request parameters for postWriters operation in WriterApi.
 * @export
 * @interface WriterApiPostWritersRequest
 */
export interface WriterApiPostWritersRequest {
    /**
     * 
     * @type {WriterRequest}
     * @memberof WriterApiPostWriters
     */
    readonly writerRequest: WriterRequest
}

/**
 * Request parameters for putWritersId operation in WriterApi.
 * @export
 * @interface WriterApiPutWritersIdRequest
 */
export interface WriterApiPutWritersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof WriterApiPutWritersId
     */
    readonly id: number

    /**
     * 
     * @type {WriterRequest}
     * @memberof WriterApiPutWritersId
     */
    readonly writerRequest: WriterRequest
}

/**
 * WriterApi - object-oriented interface
 * @export
 * @class WriterApi
 * @extends {BaseAPI}
 */
export class WriterApi extends BaseAPI {
    /**
     * 
     * @param {WriterApiDeleteWritersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriterApi
     */
    public deleteWritersId(requestParameters: WriterApiDeleteWritersIdRequest, options?: AxiosRequestConfig) {
        return WriterApiFp(this.configuration).deleteWritersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WriterApiGetWritersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriterApi
     */
    public getWriters(requestParameters: WriterApiGetWritersRequest = {}, options?: AxiosRequestConfig) {
        return WriterApiFp(this.configuration).getWriters(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WriterApiGetWritersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriterApi
     */
    public getWritersId(requestParameters: WriterApiGetWritersIdRequest, options?: AxiosRequestConfig) {
        return WriterApiFp(this.configuration).getWritersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WriterApiPostWritersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriterApi
     */
    public postWriters(requestParameters: WriterApiPostWritersRequest, options?: AxiosRequestConfig) {
        return WriterApiFp(this.configuration).postWriters(requestParameters.writerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WriterApiPutWritersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WriterApi
     */
    public putWritersId(requestParameters: WriterApiPutWritersIdRequest, options?: AxiosRequestConfig) {
        return WriterApiFp(this.configuration).putWritersId(requestParameters.id, requestParameters.writerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


